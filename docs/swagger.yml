openapi: 3.0.0
info:
  title: SH 2fa API
  version: "1.0.0"
paths:
  /service/bind:
    post:
      summary: Bind the service user to an existing 2FA service
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceId:
                  type: string
                  example: "service-123"
                userId:
                  type: string
                  example: "user-456"
                username: 
                  type: string
                  example: "john_doe"
                authUserId: 
                  type: integer
                  format: int64
                  minimum: 0
                  example: 1001
              required:
                - serviceId
                - userId
                - username
                - authUserId
      responses:
        '201':
          description: Service successfully linked to 2FA
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Service linked to 2FA successfully"
                  username:
                    type: string
                    example: "john_doe"
        '400':
          description: Bad request due to invalid input or user/service not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request data"
        '500':
          description: Internal server error while creating the link
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to create link"
  /users/create:
    post:
      summary: Create the 2FA user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
              required:
                - username
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "john_doe"
                  totp_secret:
                    type: string
                    example: "JBSWY3DPEHPK3PXP"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request data"
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Username or email already exists"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to create user"
  /users/verify:
    post:
      summary: Verify the user using TOTP token generated by the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceUserId:
                  type: string
                  example: "service-user-789"
                code:
                  type: string
                  example: "123456"
              required:
                - code
                - serviceUserId
      responses:
        '200':
          description: TOTP code is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Code is valid"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request data"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        '401':
          description: TOTP code is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "failure"
                  message:
                    type: string
                    example: "Invalid code"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to update user service link"
  /users/session/check:
    post:
      summary: Check if user 2FA session is still valid within specified service
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceId:
                  type: integer
                  format: int64
                  minimum: 0
                  example: 12345
                userId:
                  type: string
                  example: "user-456"
              required:
                - serviceId
                - userId
      responses:
        '200':
          description: Session validity check successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: Indicates if the session is valid
                    example: true
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request data"
        '404':
          description: User-service link not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to fetch user-service link"
        '500':
          description: Database error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Database error"
